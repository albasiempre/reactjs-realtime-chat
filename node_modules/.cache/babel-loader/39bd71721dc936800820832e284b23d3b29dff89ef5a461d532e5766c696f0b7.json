{"ast":null,"code":"var _jsxFileName = \"/Users/akihisa/healthcare-social-app-separate-frontend/src/components/timeline/Timeline.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Post from \"../post/Post\";\nimport Share from \"../Share/Share\";\nimport \"./Timeline.css\";\n// import { Posts } from \"../../dummyData\";\n// import axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport AxiosWrapper from \"../../lib/axiosWrapper\";\n\n//タイムライン用とプロフィール用がある。\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed({\n  username\n}) {\n  _s();\n  const [posts, setPosts] = useState([]);\n\n  // authenticationの役割\n  const {\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    // console.log(\"timeline 1\");\n\n    // APIのデータ取得が非同期なので、ここも合わせる\n    const fetchPosts = async () => {\n      const res = username ? await AxiosWrapper.create().get(`/api/posts/profile/${username}`) //プロフィールの場合\n      : await AxiosWrapper.create().get(`/api/posts/timeline/${user._id}`); //ホームの場合\n\n      setPosts(\n      // 時系列で掲載\n      res.data.sort((p1, p2) => {\n        return new Date(p2.createdAt) - new Date(p1.createdAt);\n      }));\n    };\n    fetchPosts();\n  }, [username, user._id]);\n  // ユーザーのidが変更した際に、タイムラインの内容を変更する。\n  // プロフィールのデータとポスト内容を連携させるのに、第二引数に入れるのを忘れない\n\n  const deletePost = postId => {\n    setPosts(posts.filter(post => post._id !== postId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Share, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), posts.map(post =>\n      /*#__PURE__*/\n      // mongoの使用に合わせて変更\n      _jsxDEV(Post, {\n        post: post,\n        onDelete: deletePost\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"omHF6PJyNAaQxhbtLbXyaS78q/s=\");\n_c = Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Post","Share","AuthContext","AxiosWrapper","jsxDEV","_jsxDEV","Feed","username","_s","posts","setPosts","user","fetchPosts","res","create","get","_id","data","sort","p1","p2","Date","createdAt","deletePost","postId","filter","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onDelete","_c","$RefreshReg$"],"sources":["/Users/akihisa/healthcare-social-app-separate-frontend/src/components/timeline/Timeline.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Post from \"../post/Post\";\nimport Share from \"../Share/Share\";\nimport \"./Timeline.css\";\n// import { Posts } from \"../../dummyData\";\n// import axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport AxiosWrapper from \"../../lib/axiosWrapper\";\n\n\n//タイムライン用とプロフィール用がある。\nexport default function Feed({ username }) {\n  const [posts, setPosts] = useState([]);\n\n  // authenticationの役割\n  const { user } = useContext(AuthContext);\n\n  useEffect(() => {\n    // console.log(\"timeline 1\");\n\n    // APIのデータ取得が非同期なので、ここも合わせる\n    const fetchPosts = async () => {\n      const res = username\n        ? await AxiosWrapper.create().get(`/api/posts/profile/${username}`) //プロフィールの場合\n        : await AxiosWrapper.create().get(`/api/posts/timeline/${user._id}`); //ホームの場合\n\n      setPosts(\n        // 時系列で掲載\n        res.data.sort((p1, p2) => {\n          return new Date(p2.createdAt) - new Date(p1.createdAt);\n        })\n      );\n    };\n    fetchPosts();\n  }, [username, user._id]);\n  // ユーザーのidが変更した際に、タイムラインの内容を変更する。\n  // プロフィールのデータとポスト内容を連携させるのに、第二引数に入れるのを忘れない\n\n  const deletePost = (postId) => {\n    setPosts(posts.filter(post => post._id !== postId));\n  };\n  \n  return (\n    <div className=\"feed\">\n      <div className=\"feedWrapper\">\n        <Share />\n        {posts.map((post) => (\n          // mongoの使用に合わせて変更\n          <Post key={post._id} post={post} onDelete={deletePost} />\n        ))}\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAO,gBAAgB;AACvB;AACA;AACA,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAOC,YAAY,MAAM,wBAAwB;;AAGjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,IAAIA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM;IAAEY;EAAK,CAAC,GAAGd,UAAU,CAACK,WAAW,CAAC;EAExCJ,SAAS,CAAC,MAAM;IACd;;IAEA;IACA,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,GAAG,GAAGN,QAAQ,GAChB,MAAMJ,YAAY,CAACW,MAAM,CAAC,CAAC,CAACC,GAAG,CAAE,sBAAqBR,QAAS,EAAC,CAAC,CAAC;MAAA,EAClE,MAAMJ,YAAY,CAACW,MAAM,CAAC,CAAC,CAACC,GAAG,CAAE,uBAAsBJ,IAAI,CAACK,GAAI,EAAC,CAAC,CAAC,CAAC;;MAExEN,QAAQ;MACN;MACAG,GAAG,CAACI,IAAI,CAACC,IAAI,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAK;QACxB,OAAO,IAAIC,IAAI,CAACD,EAAE,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,EAAE,CAACG,SAAS,CAAC;MACxD,CAAC,CACH,CAAC;IACH,CAAC;IACDV,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACL,QAAQ,EAAEI,IAAI,CAACK,GAAG,CAAC,CAAC;EACxB;EACA;;EAEA,MAAMO,UAAU,GAAIC,MAAM,IAAK;IAC7Bd,QAAQ,CAACD,KAAK,CAACgB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACV,GAAG,KAAKQ,MAAM,CAAC,CAAC;EACrD,CAAC;EAED,oBACEnB,OAAA;IAAKsB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBvB,OAAA;MAAKsB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BvB,OAAA,CAACJ,KAAK;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACRvB,KAAK,CAACwB,GAAG,CAAEP,IAAI;MAAA;MACd;MACArB,OAAA,CAACL,IAAI;QAAgB0B,IAAI,EAAEA,IAAK;QAACQ,QAAQ,EAAEX;MAAW,GAA3CG,IAAI,CAACV,GAAG;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqC,CACzD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxB,EAAA,CA1CuBF,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}