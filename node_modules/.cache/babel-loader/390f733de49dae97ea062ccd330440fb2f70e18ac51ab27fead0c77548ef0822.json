{"ast":null,"code":"var _jsxFileName = \"/Users/akihisa/healthcare-social-app-heroku/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useReducer } from \"react\";\nimport AuthReducer from \"./AuthReducer\";\n\n//最初のユーザー状態の定義\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  // user: null, //ログインしてない\n  // user: {\n  //   _id: \"62301ab54ded0ed0584598e4\",\n  //   username: \"akihisa\",\n  //   email: \"alba.siemple@gmail.com\",\n  //   password: \"abcdefg\",\n  //   profilePicture: \"/person/1.jpg\",\n  //   coverPicture: \"\",\n  //   followers: [],\n  //   followings: [],\n  //   isAdmin: false,\n  // },\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  isFetching: false,\n  error: false\n};\nexport const AuthContext = /*#__PURE__*/createContext(initialState);\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  //ユーザー入力によって状態(state)が更新され、それをグローバルに利用している。\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\n\n  //set user data in local storage\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n\n  // console.log(\"====state\");\n  // console.log(state);\n\n  return (\n    /*#__PURE__*/\n    // 実際にここでAuthContextを共有する\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        user: state.user,\n        isFetching: state.isFetching,\n        error: state.error,\n        dispatch\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n    // childrenはAppに相当する\n  );\n};\n_s(AuthContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","AuthReducer","jsxDEV","_jsxDEV","initialState","user","JSON","parse","localStorage","getItem","isFetching","error","AuthContext","AuthContextProvider","children","_s","state","dispatch","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akihisa/healthcare-social-app-heroku/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\nimport AuthReducer from \"./AuthReducer\";\n\n//最初のユーザー状態の定義\nconst initialState = {\n  // user: null, //ログインしてない\n  // user: {\n  //   _id: \"62301ab54ded0ed0584598e4\",\n  //   username: \"akihisa\",\n  //   email: \"alba.siemple@gmail.com\",\n  //   password: \"abcdefg\",\n  //   profilePicture: \"/person/1.jpg\",\n  //   coverPicture: \"\",\n  //   followers: [],\n  //   followings: [],\n  //   isAdmin: false,\n  // },\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  isFetching: false,\n  error: false,\n};\n\nexport const AuthContext = createContext(initialState);\n\nexport const AuthContextProvider = ({ children }) => {\n  //ユーザー入力によって状態(state)が更新され、それをグローバルに利用している。\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\n\n  //set user data in local storage\n  useEffect(() => {\n\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n\n  // console.log(\"====state\");\n  // console.log(state);\n\n  return (\n    // 実際にここでAuthContextを共有する\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        isFetching: state.isFetching,\n        error: state.error,\n        dispatch,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n    // childrenはAppに相当する\n  );\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC5D,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGd,aAAa,CAACM,YAAY,CAAC;AAEtD,OAAO,MAAMS,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,UAAU,CAACC,WAAW,EAAEG,YAAY,CAAC;;EAE/D;EACAL,SAAS,CAAC,MAAM;IAEdS,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACH,KAAK,CAACX,IAAI,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACW,KAAK,CAACX,IAAI,CAAC,CAAC;;EAEhB;EACA;;EAEA;IAAA;IACE;IACAF,OAAA,CAACS,WAAW,CAACQ,QAAQ;MACnBC,KAAK,EAAE;QACLhB,IAAI,EAAEW,KAAK,CAACX,IAAI;QAChBK,UAAU,EAAEM,KAAK,CAACN,UAAU;QAC5BC,KAAK,EAAEK,KAAK,CAACL,KAAK;QAClBM;MACF,CAAE;MAAAH,QAAA,EAEDA;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;IACtB;EAAA;AAEJ,CAAC;AAACV,EAAA,CA3BWF,mBAAmB;AAAAa,EAAA,GAAnBb,mBAAmB;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}